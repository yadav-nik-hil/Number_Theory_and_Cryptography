# -*- coding: utf-8 -*-
"""
@author: Nikhil Yadav
"""

def GCD(a, b):
  if b == 0:
    return a
  return GCD(b, a % b)

def DecipherCommonDivisor(first_ciphertext, first_modulo, first_exponent, second_ciphertext, second_modulo, second_exponent):
  # Fix this implementation to correctly decipher both messages in case
  # first_modulo and second_modulo share a prime factor, and return
  # a pair (first_message, second_message). The implementation below won't work
  # if the common_prime is bigger than 1000000.
  common_prime = GCD(first_modulo,second_modulo)
  q1 = first_modulo // common_prime
  q2 = second_modulo // common_prime
  return (Decrypt(first_ciphertext, common_prime, q1, first_exponent), Decrypt(second_ciphertext, common_prime, q2, second_exponent))
  return ("unknown message 1", "unknown message 2")

first_ciphertext = 23402197839825692972957660045778005842149570897525565884030609841447497251897989699441878864356827076382914144503306327825195586612359555424774490982037582237066994974597680950158893991141848342087005739774563510316219462834998856466395854239468748012474813939969736279381474141408975441930226654470509840545902057273419529586319420996953635246047632517133343837614016964611767487664771097138242956384358875235954455242525595951902976992404807998173614628224868047333599482826829214633744976147539512358779840250950906473302037621404671062661398282452008807449216135596254412709706306612180825630285207
first_modulo = 58430823052528382232133162302686450950325469505875659240893229402912849840784309398807910065914827693927654379087691699343872463431863820528404206238621375034134223224550898236635277014485802812169842923892545064506382750914506131733421755620169771252068722149093463194110389888198706547399113274669324939230289590384817282220066815621515694361776987606124224166139632882923972455465687163365892873407377154186582920232983732264041961425519725867802358413817383859468852644174951734478657652205963797131615641353571742901542970047092056441684257125633460892715564219695534982132772847099500990153159493
first_exponent = 2746118316073165006639038412489080229254239843347153634155286882078957003180280976570735902213132927273096496684341374829942796710900231180504644399747
second_ciphertext = 30727040453983198346085853479092007121170298341280644429200282752975717255888449508484551605881216103173708171060447929559225510082705090077245435032226394315334065553706481613913603534470394670437184947722155153114209268193235042140736923023590768685692783514873340402355775735846109759697748120233777810481952073715032877304902097750445981869076182666622029473694669920172468716779937348673868171294362620903115903645873289564367176851434972937848591902468604400091051094342304122317377572964272370825515688006084797380707045470951321039467067019460709497651682710286878824565888446939229639383746
second_modulo = 42955660491543430460148980223483714568674234383080724206879432109744068992302351872678094322626198782875395264399683702531442650135501135314224418412956329257244753538669224867463416933578848236691757751760346388773871177654731330626106150400017398309330888903195999995955385444097920846918948184509773583149893677181571427932535786503554494314244294387551141996689565647925375574586590998569956897670722964200467030891957754959187718494336504559943885199686487499306417596091732019643533054349876912582987170110689841980733691588287144182824378328622431439004258091442919814253322774125364502939460173
second_exponent = 1696307946163562648509752484630349193234799326977939859599277182356207670242676510190455023892125378267322231053560789876259990406520567562708111385869

decrypt_sixth_puzzle = DecipherCommonDivisor(first_ciphertext, first_modulo, first_exponent, second_ciphertext, second_modulo, second_exponent)
print(decrypt_sixth_puzzle)